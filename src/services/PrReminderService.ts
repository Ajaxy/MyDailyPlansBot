import type { Bot } from 'grammy';

import { logger } from '../util/logger';
import type { User } from '../entities';

import type { GitHubService } from './GitHubService';
import type { UserService } from './UserService';

export class PrReminderService {
  private bot: Bot;
  private githubService: GitHubService;
  private userService: UserService;

  constructor(bot: Bot, githubService: GitHubService, userService: UserService) {
    this.bot = bot;
    this.githubService = githubService;
    this.userService = userService;
  }

  /**
   * Send PR reminders to all active chats
   * Only sends reminders to chats that have:
   * 1. Users with GitHub usernames configured (including inactive users)
   * 2. Repositories with GitHub tokens configured for that chat
   * 3. Open PRs assigned to those users
   */
  public async sendPrReminders(): Promise<void> {
    try {
      const activeChatIds = await this.userService.getActiveChatIds();

      for (const chatId of activeChatIds) {
        await this.sendPrReminderToChat(chatId);
      }
    } catch (error) {
      logger.error('Error sending PR reminders:', error);
    }
  }

  /**
   * Send PR reminder to a specific chat
   */
  public async sendPrReminderToChat(chatId: number): Promise<void> {
    try {
      // Get all users with GitHub usernames in this chat (including inactive users)
      const allUsers = await this.userService.getAllUsersForChat(chatId);
      const usersWithGitHub = allUsers.filter((user: User) => user.githubUsername);

      if (usersWithGitHub.length === 0) {
        logger.info(`No users with GitHub usernames in chat ${chatId}, skipping PR reminder`);
        return;
      }

      // Get GitHub usernames
      const githubUsernames = usersWithGitHub.map((user: User) => user.githubUsername!);

      // Fetch assigned PRs for this chat
      const prsByUser = await this.githubService.getAssignedPrs(githubUsernames, chatId);

      // Build reminder message
      const message = this.buildPrReminderMessage(usersWithGitHub, prsByUser);

      if (message) {
        await this.bot.api.sendMessage(chatId, message, {
          parse_mode: 'HTML',
        });
        logger.info(`Sent PR reminder to chat ${chatId}`);
      } else {
        logger.info(`No PRs to remind about in chat ${chatId}`);
      }
    } catch (error) {
      logger.error(`Error sending PR reminder to chat ${chatId}:`, error);
    }
  }

  /**
   * Build PR reminder message with a checklist at the end
   */
  private buildPrReminderMessage(
    users: User[],
    prsByUser: Map<string, {
      githubUsername: string;
      prs: Array<{ number: number; title: string; url: string; repo: string }>;
    }>,
  ): string | undefined {
    const userMessages: string[] = [];

    for (const user of users) {
      const userPrs = prsByUser.get(user.githubUsername!);
      if (userPrs && userPrs.prs.length > 0) {
        // Escape HTML characters in username
        const escapedUsername = this.escapeHtml(user.username);
        let userMessage = `\n\nüë§ <b>@${escapedUsername}</b>`;

        for (const pr of userPrs.prs) {
          // Escape HTML characters in PR title
          const escapedTitle = this.escapeHtml(pr.title);
          const prLink = `<a href="${pr.url}">#${pr.number}</a>`;
          userMessage += `\n‚Ä¢ ${prLink} - ${escapedTitle} (${pr.repo})`;
        }

        userMessages.push(userMessage);
      }
    }

    if (userMessages.length === 0) {
      return undefined;
    }

    // Header in Russian as requested
    const header = 'üîî <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ PR, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º:</b>';

    // Checklist as a quote
    /* eslint-disable @stylistic/max-len */
    const checklist = `<blockquote><b>–ß–µ–∫–ª–∏—Å—Ç</b>

1. –í–æ <a href="https://github.com/pulls?q=user:mytonwalletorg+user:mytonwallet-org+assignee:@me+is:pr+is:open+archived:false">–≤—Å–µ—Ö PR, –≥–¥–µ –≤—ã assignee</a>, —Å–¥–µ–ª–∞–π—Ç–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –æ—Ç –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å–Ω–∏–º–∏—Ç–µ —Å —Å–µ–±—è assignee. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ PR, –ø–æ—á–µ–º—É.
2. –î–æ–≤–µ–¥–µ–Ω–∏–µ PR –¥–æ —Å–ª–∏—Ç–∏—è ‚Äî –∑–∞–¥–∞—á–∞ –µ–≥–æ –∞–≤—Ç–æ—Ä–∞. –ï—Å–ª–∏ <a href="https://github.com/pulls?q=user:mytonwalletorg+user:mytonwallet-org+author:@me+is:pr+is:open+archived:false+draft:false">–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö PR</a> –∑–∞—Å—Ç—Ä—è–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–º—É, –Ω–∞ –∫–æ–≥–æ –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω, –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

‚Ä¢ –ï—Å–ª–∏ –≤—ã <b>–ø–æ–ª—É—á–∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è</b>, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –ª—é–¥–µ–π –Ω–∞ —Ä–µ–≤—å—é –≤ –ø–æ–ª–µ Assignee.
‚Ä¢ –ï—Å–ª–∏ –≤—ã <b>–æ–∂–∏–¥–∞–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b> –æ—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞–ø–æ–º–Ω–∏—Ç–µ –µ–º—É –≤ –ª–∏—á–∫—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ Assignee.
‚Ä¢ –ï—Å–ª–∏ <b>–≤—Å—ë –≥–æ—Ç–æ–≤–æ</b>, —Å–ª–µ–π—Ç–µ PR.
‚Ä¢ –ï—Å–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏—á–µ–≥–æ —Å PR <b>—Å–¥–µ–ª–∞—Ç—å –Ω–µ–ª—å–∑—è –∏–ª–∏ –≤—ã –∑–∞–Ω—è—Ç—ã</b> –Ω–µ–æ—Ç–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ PR, –ø–æ—á–µ–º—É.
‚Ä¢ –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –≤—ã <b>–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–∞–±–æ—Ç—É</b> –Ω–∞–¥ PR –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫, –¥–æ–±–∞–≤—å—Ç–µ <code>[Paused]</code> –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
</blockquote>`;
    /* eslint-enable @stylistic/max-len */

    return [header, ...userMessages, checklist].join('');
  }

  /**
   * Escape HTML characters to prevent injection
   */
  private escapeHtml(text: string): string {
    const htmlEntities: Record<string, string> = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#39;',
    };
    return text.replace(/[&<>"']/g, (match) => htmlEntities[match]);
  }
}
